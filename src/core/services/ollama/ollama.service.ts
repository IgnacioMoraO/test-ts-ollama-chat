import { OllamaAbstractService } from './ollama.abstract.service'
import axios from 'axios'

export class OllamaService implements OllamaAbstractService {
  URL = 'https://ollama.baseneox.cl/api/generate'
  configuration = {
    headers: {
      Authorization: 'Bearer qP4d3ZLqG0/1kESUxl4wgFo4rPezAr4VASRKs8YpbHQ=',
    },
  }
  data = {
    model: 'llama3.2:3b',
    prompt: 'una funcion que genere la serie fibonaccio para un entero',
    stream: false,
    context: [
      128006, 9125, 128007, 271, 38766, 1303, 33025, 2696, 25, 6790, 220, 2366, 18, 271, 128009, 128006, 882, 128007,
      271, 75, 28102, 11305, 409, 2068, 5928, 272, 1044, 128009, 128006, 78191, 128007, 271, 334, 1090, 4653, 22776,
      264, 356, 1044, 57277, 34, 1044, 1560, 653, 326, 28102, 11305, 409, 2068, 5840, 409, 46462, 43445, 11, 23201, 72,
      9157, 99633, 665, 1208, 9047, 4298, 1624, 3241, 379, 665, 58306, 39505, 51369, 13, 435, 361, 67581, 2172, 4247,
      426, 19571, 818, 4610, 283, 90499, 8112, 5203, 1327, 729, 3739, 409, 2537, 326, 28102, 36550, 356, 379, 4567,
      5724, 382, 334, 9028, 2540, 62527, 61942, 409, 356, 1044, 57277, 32, 16513, 5840, 11, 513, 3118, 276, 74854, 409,
      5252, 93554, 61942, 409, 356, 1044, 1473, 9, 256, 3146, 16394, 2172, 15833, 83, 4042, 96618, 356, 1044, 1560, 653,
      326, 28102, 11305, 11813, 2172, 15833, 83, 4042, 11, 781, 1744, 68832, 1744, 658, 98031, 5477, 390, 81656, 1208,
      16697, 409, 3977, 34435, 409, 50271, 41297, 658, 45159, 627, 9, 256, 3146, 46, 13283, 2172, 264, 75148, 96618,
      356, 1044, 513, 2960, 969, 665, 658, 35010, 409, 75148, 379, 96673, 3429, 4097, 277, 18224, 379, 52962, 79409,
      627, 9, 256, 3146, 15000, 318, 33942, 17434, 96618, 356, 1044, 52603, 1208, 36222, 26826, 409, 84512, 1744, 41604,
      95665, 390, 75148, 409, 46418, 64962, 11, 781, 1744, 17028, 64, 1208, 312, 1338, 42600, 1624, 45159, 627, 9, 256,
      3146, 22759, 501, 2172, 96618, 356, 1044, 19678, 653, 29928, 409, 68630, 2172, 1744, 52603, 1208, 1922, 5840, 409,
      84512, 379, 96673, 4173, 39965, 300, 1744, 41604, 95665, 390, 74918, 64962, 409, 18224, 382, 334, 16394, 437,
      81451, 17038, 665, 356, 1044, 57277, 32, 16513, 5840, 11, 513, 3118, 276, 58310, 409, 2537, 64962, 81451, 17038,
      665, 356, 1044, 1473, 9, 256, 3146, 2300, 6398, 96618, 1595, 396, 7964, 1595, 4930, 7964, 1595, 8846, 63, 3429,
      84327, 277, 70526, 3810, 437, 627, 9, 256, 3146, 9028, 2540, 288, 96618, 1595, 1799, 63, 379, 1595, 82704, 530,
      63, 3429, 84327, 277, 60355, 379, 19973, 28043, 409, 60355, 627, 9, 256, 3146, 3968, 354, 15844, 96618, 1595,
      3733, 63, 379, 1595, 4429, 63, 3429, 84327, 277, 70526, 409, 42614, 1344, 354, 5048, 627, 9, 256, 3146, 45, 29752,
      96618, 1595, 42232, 63, 297, 1595, 4679, 63, 3429, 4097, 277, 658, 14448, 308, 8938, 382, 334, 1110, 59976, 37116,
      658, 36860, 57277, 31305, 1391, 7472, 653, 36860, 3920, 29141, 665, 356, 23240, 4316, 288, 96537, 55996, 513,
      76509, 27105, 2537, 18224, 11, 55996, 513, 33272, 276, 5252, 84512, 379, 55996, 513, 53460, 23685, 2537, 91800,
      13, 362, 16513, 5840, 11, 1028, 3118, 78, 653, 58300, 409, 45159, 1744, 71687, 58310, 7434, 437, 81451, 17038,
      1473, 74694, 11055, 198, 1085, 366, 9862, 1363, 396, 1925, 368, 341, 262, 443, 1611, 13115, 5840, 409, 7482, 198,
      262, 528, 865, 284, 220, 605, 280, 262, 1181, 13026, 1318, 284, 330, 93077, 3382, 262, 443, 2417, 50167, 5252,
      7482, 198, 262, 1487, 487, 6232, 1134, 330, 6719, 14448, 409, 865, 1560, 25, 330, 1134, 865, 1134, 1487, 487,
      5449, 280, 262, 1487, 487, 6232, 1134, 330, 6719, 14448, 1624, 13026, 1560, 25, 330, 1134, 13026, 1134, 1487, 487,
      5449, 401, 262, 443, 7613, 12712, 802, 73384, 10515, 15540, 198, 262, 528, 379, 284, 220, 508, 280, 262, 528,
      52413, 284, 865, 489, 379, 280, 262, 1487, 487, 6232, 1134, 330, 8921, 52413, 409, 865, 384, 379, 1560, 25, 330,
      1134, 52413, 1134, 1487, 487, 5449, 401, 262, 471, 220, 15, 280, 534, 14196, 19884, 1737, 10566, 58300, 11, 513,
      9632, 276, 8924, 7482, 1595, 87, 63, 379, 1595, 88, 7964, 513, 737, 18375, 268, 4582, 37252, 11, 513, 5935, 64,
      1208, 52413, 409, 5252, 8924, 7482, 379, 513, 23356, 547, 658, 27284, 382, 334, 10835, 416, 12712, 409, 356, 1044,
      57277, 34, 1044, 1560, 653, 326, 28102, 11305, 23321, 5553, 1995, 1678, 1744, 513, 77161, 665, 99383, 95162, 1473,
      9, 256, 3146, 5001, 277, 44784, 409, 3241, 96618, 356, 1044, 513, 77161, 3429, 64796, 277, 30540, 12712, 409,
      89249, 2040, 64545, 11, 67623, 11, 83090, 300, 409, 63716, 379, 11158, 627, 9, 256, 3146, 6161, 288, 379, 11766,
      437, 96618, 356, 1044, 513, 77161, 3429, 48837, 44615, 89262, 300, 409, 47178, 379, 11766, 437, 409, 46915, 5840,
      627, 9, 256, 3146, 33, 2315, 409, 18224, 96618, 356, 1044, 513, 77161, 3429, 67581, 277, 379, 64796, 277, 23963,
      409, 18224, 627, 9, 256, 3146, 38, 15817, 17038, 96618, 356, 1044, 513, 77161, 665, 658, 63716, 409, 67623, 379,
      30540, 12712, 1099, 64501, 15540, 382, 334, 1128, 4256, 3739, 57277, 1737, 594, 28999, 11, 356, 1044, 1560, 653,
      326, 28102, 11305, 29638, 28246, 1744, 89539, 5203, 23201, 689, 28830, 329, 409, 93554, 379, 30540, 12712, 13,
      17360, 11813, 2172, 15833, 83, 4042, 11, 11744, 5840, 264, 75148, 379, 1499, 318, 33942, 17434, 781, 92065, 10728,
      3429, 64796, 277, 3241, 22514, 78, 379, 27533, 481, 13, 1221, 924, 23201, 689, 342, 3105, 409, 83090, 300, 379,
      44615, 89262, 300, 11, 356, 1044, 1560, 653, 326, 28102, 11305, 16188, 665, 658, 63716, 409, 3241, 6617, 78, 13,
    ],
  }

  async generateQuestion(prompt: string): Promise<any> {
    try {
      this.data.prompt = prompt
      const response = axios.post(this.URL, this.data, this.configuration)
      return response
    } catch (error) {
      throw error
    }
  }
}
